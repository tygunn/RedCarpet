/*
 * Copyright (C) 2018 Tyler Gunn
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.egunn.redcarpet;

import com.egunn.redcarpet.PixelStar.HoleFormat;
import de.erichseifert.vectorgraphics2d.Document;
import de.erichseifert.vectorgraphics2d.VectorGraphics2D;
import de.erichseifert.vectorgraphics2d.eps.EPSProcessor;
import de.erichseifert.vectorgraphics2d.intermediate.CommandSequence;
import de.erichseifert.vectorgraphics2d.pdf.PDFProcessor;
import de.erichseifert.vectorgraphics2d.svg.SVGProcessor;
import de.erichseifert.vectorgraphics2d.util.PageSize;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.dnd.DragSource;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.RoundingMode;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.text.InternationalFormatter;

/**
 * Facilitates configuration of a star.
 * @author tyler
 */
public class StarConfiguration extends javax.swing.JFrame {

    private boolean isCalculating = false;
    private StarPreview mPreview = null;
    private CompletableFuture<PixelStar> mStarFuture = null;
    private ExecutorService mExecutorService = Executors.newCachedThreadPool();
    private StarRepository mStarRepository = new StarRepository();
    
    /**
     * Creates new form StarConfiguration
     */
    public StarConfiguration() {
        showSplashScreen();
        
        initComponents();
        setTitle("Red Carpet - Copyright 2018 Tyler Gunn");
        setLocationRelativeTo(null);
        
        mHoleFormat.addItem("Outline");
        mHoleFormat.addItem("Outline w/center");
        mHoleFormat.addItem("Solid");
        
        loadDefaultStar();
    }

    private void showSplashScreen() {
        SplashScreen splashScreen = new SplashScreen();
        splashScreen.setAlwaysOnTop(true);
        splashScreen.setLocationRelativeTo(null);
        splashScreen.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        splashScreen.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        mStarWidthInches = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        mStarRatio = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        mHoleDiameterInches = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        mHoleSpacingInches = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mRowSpacingInches = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        mRows = new javax.swing.JTextField();
        mBuildStar = new javax.swing.JButton();
        mIsDrawBorder = new javax.swing.JCheckBox();
        mIsDrawInnerBorders = new javax.swing.JCheckBox();
        mIsLabelHoles = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        mNumPixels = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        mHoleFormat = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboUnits = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jModelName = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jNewItem = new javax.swing.JMenuItem();
        jSaveItem = new javax.swing.JMenuItem();
        jLoadMenuItem = new javax.swing.JMenuItem();
        jExportAsEps = new javax.swing.JMenuItem();
        jExportAsSvg = new javax.swing.JMenuItem();
        jExportToXLights = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(538, 450));
        setMinimumSize(new java.awt.Dimension(538, 450));
        setPreferredSize(new java.awt.Dimension(538, 450));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Star Width (units):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(jLabel1, gridBagConstraints);

        mStarWidthInches.setText("72");
        mStarWidthInches.setMaximumSize(new java.awt.Dimension(120, 30));
        mStarWidthInches.setMinimumSize(new java.awt.Dimension(120, 30));
        mStarWidthInches.setName(""); // NOI18N
        mStarWidthInches.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mStarWidthInches, gridBagConstraints);

        jLabel2.setText("Star Ratio (outer/inner):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(jLabel2, gridBagConstraints);

        mStarRatio.setText("2.0755");
        mStarRatio.setMaximumSize(new java.awt.Dimension(120, 30));
        mStarRatio.setMinimumSize(new java.awt.Dimension(120, 30));
        mStarRatio.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mStarRatio, gridBagConstraints);

        jLabel3.setText("Hole Diameter (units):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(jLabel3, gridBagConstraints);

        mHoleDiameterInches.setText("0.472441");
        mHoleDiameterInches.setMaximumSize(new java.awt.Dimension(120, 30));
        mHoleDiameterInches.setMinimumSize(new java.awt.Dimension(120, 30));
        mHoleDiameterInches.setName(""); // NOI18N
        mHoleDiameterInches.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mHoleDiameterInches, gridBagConstraints);

        jLabel4.setText("Hole Spacing (units):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(jLabel4, gridBagConstraints);

        mHoleSpacingInches.setText("1.5");
        mHoleSpacingInches.setMaximumSize(new java.awt.Dimension(120, 30));
        mHoleSpacingInches.setMinimumSize(new java.awt.Dimension(120, 30));
        mHoleSpacingInches.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mHoleSpacingInches, gridBagConstraints);

        jLabel5.setText("Row Spacing (units):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(jLabel5, gridBagConstraints);

        mRowSpacingInches.setText("2.0");
        mRowSpacingInches.setMaximumSize(new java.awt.Dimension(120, 30));
        mRowSpacingInches.setMinimumSize(new java.awt.Dimension(120, 30));
        mRowSpacingInches.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mRowSpacingInches, gridBagConstraints);

        jLabel6.setText("Rows / Layers:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(jLabel6, gridBagConstraints);

        mRows.setText("10");
        mRows.setMaximumSize(new java.awt.Dimension(120, 30));
        mRows.setMinimumSize(new java.awt.Dimension(120, 30));
        mRows.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mRows, gridBagConstraints);

        mBuildStar.setText("Build");
        mBuildStar.setToolTipText("");
        mBuildStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBuildStarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        getContentPane().add(mBuildStar, gridBagConstraints);

        mIsDrawBorder.setSelected(true);
        mIsDrawBorder.setText("Draw Outer Border");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(mIsDrawBorder, gridBagConstraints);

        mIsDrawInnerBorders.setSelected(true);
        mIsDrawInnerBorders.setText("Draw Inner Star Outlines");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(mIsDrawInnerBorders, gridBagConstraints);

        mIsLabelHoles.setSelected(true);
        mIsLabelHoles.setText("Label Holes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(mIsLabelHoles, gridBagConstraints);

        jLabel7.setText("Number of Pixels:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel7, gridBagConstraints);

        mNumPixels.setText("<undefined>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(mNumPixels, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(mHoleFormat, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel8.setText("Units:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel8, gridBagConstraints);

        jComboUnits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inches", "Millimeters", "Centimeters" }));
        jComboUnits.setMinimumSize(new java.awt.Dimension(120, 30));
        jComboUnits.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jComboUnits, gridBagConstraints);

        jLabel9.setText("Model Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel9, gridBagConstraints);

        jModelName.setMaximumSize(null);
        jModelName.setMinimumSize(new java.awt.Dimension(120, 30));
        jModelName.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jModelName, gridBagConstraints);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        jNewItem.setText("New...");
        jNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewItemActionPerformed(evt);
            }
        });
        fileMenu.add(jNewItem);

        jSaveItem.setText("Save...");
        jSaveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveItemActionPerformed(evt);
            }
        });
        fileMenu.add(jSaveItem);

        jLoadMenuItem.setText("Load...");
        jLoadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(jLoadMenuItem);

        jExportAsEps.setText("Export as EPS");
        jExportAsEps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExportAsEpsActionPerformed(evt);
            }
        });
        fileMenu.add(jExportAsEps);

        jExportAsSvg.setText("Export as SVG");
        jExportAsSvg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExportAsSvgActionPerformed(evt);
            }
        });
        fileMenu.add(jExportAsSvg);

        jExportToXLights.setText("Export to xLights");
        jExportToXLights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExportToXLightsActionPerformed(evt);
            }
        });
        fileMenu.add(jExportToXLights);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mBuildStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBuildStarActionPerformed
        outputStar();
    }//GEN-LAST:event_mBuildStarActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        showSplashScreen();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "Todo: Add help");
    }//GEN-LAST:event_contentsMenuItemActionPerformed

    private void jExportAsEpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportAsEpsActionPerformed
        exportAsEps();
    }//GEN-LAST:event_jExportAsEpsActionPerformed

    private void jExportAsSvgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportAsSvgActionPerformed
        exportAsSvg();
    }//GEN-LAST:event_jExportAsSvgActionPerformed

    private void jExportToXLightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportToXLightsActionPerformed
        exportToXLights();
    }//GEN-LAST:event_jExportToXLightsActionPerformed

    private void jSaveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveItemActionPerformed
        saveConfiguration();
    }//GEN-LAST:event_jSaveItemActionPerformed

    private void jLoadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadMenuItemActionPerformed
        loadConfiguration();
    }//GEN-LAST:event_jLoadMenuItemActionPerformed

    private void jNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewItemActionPerformed
        newConfiguration();
    }//GEN-LAST:event_jNewItemActionPerformed

    /**
     * Create a new configuration; basically just empty out the model name so
     * the user can work on the current one but as a new star.
     */
    private void newConfiguration() {
        jModelName.setText("");
    }
    
    /**
     * Prompts the user with a list of the stars so they can load one to edit.
     */
    private void loadConfiguration() {
        List<StarParameters> stars = mStarRepository.getStars();
        List<String> modelNames = stars.stream()
                .map(s -> s.getStarName())
                .collect(Collectors.toList());
        
        String toLoad = (String) JOptionPane.showInputDialog(
                null, "Choose model to load",
                "Choose model to load", JOptionPane.QUESTION_MESSAGE,
                null, modelNames.toArray(), modelNames.get(0));
        if (toLoad == null ) {
            return;
        }
        StarParameters params = stars.stream()
                .filter(s-> s.getStarName().equals(toLoad))
                .findFirst().get();
        setParametersToUi(params);
    }
    
    /**
     * Save the current star configuration.
     */
    private void saveConfiguration() {
        StarParameters params = getCurrentConfiguration();
        mStarRepository.updateStarElement(params);
    }
    
    /**
     * Retrieves an instance of {@link StarParameters} with the current config
     * in the UI.
     * @return 
     */
    private StarParameters getCurrentConfiguration() {
        String starWidthInchesStr = mStarWidthInches.getText();
        String starRatioStr = mStarRatio.getText();
        String holeDiameterInchesStr = mHoleDiameterInches.getText();
        String holeSpacingInchesStr = mHoleSpacingInches.getText();
        String rowSpacingInchesStr = mRowSpacingInches.getText();
        String rowsStr = mRows.getText();
        
        String starName;
        String units;
        double starWidth;
        double ratio;
        double holeDiameter; 
        double holeSpacing; 
        double rowSpacing;
        int layers;
        
        starName = jModelName.getText();
        units = jComboUnits.getSelectedItem().toString();
        
        try {
            starWidth = Double.parseDouble(starWidthInchesStr);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Width must be a number.");
            return null;
        }
        try {
            ratio = Double.parseDouble(starRatioStr);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Ratio must be a number.");
            return null;
        }
        try {
            holeDiameter = Double.parseDouble(holeDiameterInchesStr);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, 
                    "Hole diameter must be a number.");
            return null;
        }
        try {
            holeSpacing = Double.parseDouble(holeSpacingInchesStr);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, 
                    "Hole spacing must be a number.");
            return null;
        }
        try {
            rowSpacing = Double.parseDouble(rowSpacingInchesStr);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, 
                    "Row spacing must be a number.");
            return null;
        }
        try {
            layers = Integer.parseInt(rowsStr);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Rows must be a whole number.");
            return null;
        }
        
        HoleFormat holeFormat;
        switch (mHoleFormat.getSelectedIndex()) {
            case 0:
                holeFormat = HoleFormat.OUTLINE;
                break;
            case 1:
                holeFormat = HoleFormat.OUTLINE_TARGET;
                break;
            case 2:
                holeFormat = HoleFormat.SOLID;
                break;  
            default:
                holeFormat = HoleFormat.OUTLINE;
        }
        
        return new StarParameters(starName, 
                units, 
                starWidth, 
                ratio, 
                holeDiameter, 
                holeSpacing, 
                rowSpacing, 
                layers, 
                mIsDrawBorder.isSelected(), 
                mIsDrawInnerBorders.isSelected(), 
                mIsLabelHoles.isSelected(), 
                holeFormat.ordinal());
    }
    
    /**
     * Exports the current star to an xLights configuration.
     */
    private void exportToXLights() {
        JTextField modelNameField = new JTextField(20);
        NumberFormat format = DecimalFormat.getInstance();
        format.setMinimumFractionDigits(2);
        format.setMaximumFractionDigits(2);
        format.setRoundingMode(RoundingMode.HALF_UP);
        InternationalFormatter formatter = new InternationalFormatter(format);
        formatter.setAllowsInvalid(false);
        formatter.setMinimum(0.0);
        formatter.setMaximum(1000.00);
        JFormattedTextField modelScaleField = 
                new JFormattedTextField(formatter);
        modelScaleField.setColumns(10);
        
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Model Name:"));
        myPanel.add(modelNameField);
        myPanel.add(Box.createHorizontalStrut(15)); // a spacer
        myPanel.add(new JLabel("Model scale factor:"));
        myPanel.add(modelScaleField);

        int result = JOptionPane.showConfirmDialog(null, myPanel, 
                 "Choose Model Name and Scale", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            saveToXLights(modelNameField.getText(), 
                    Double.parseDouble(modelScaleField.getText()));
        }
    }
    
    /**
     * Save a model to xLights.
     * @param modelName
     * @param scale 
     */
    private void saveToXLights(String modelName, double scale) {
        JFileChooser chooseDirectory = new JFileChooser();
        chooseDirectory.setDialogTitle("Select root of your xLights directory");
        chooseDirectory.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int chosenOption = chooseDirectory.showOpenDialog(this);
        if (chosenOption == JFileChooser.APPROVE_OPTION) {
            File chosenFolder = chooseDirectory.getSelectedFile();
            
            // Check for the xlights_rgbeffects file in the chosen dir.
            Path xLightsPath = Paths.get(chosenFolder.getAbsolutePath(),
                    "xlights_rgbeffects.xml");
            
            String chosenFileName = xLightsPath.toAbsolutePath().toString();
            XLightsConfig config = new XLightsConfig(chosenFileName);
            // scale
            PixelStar star = getConfiguredStar(scale);
            config.addStarAsSegments(star, modelName);
            //config.addStarAsStars(star, modelName);
            config.saveXml();
        }
    }
    
    /**
     * Output the star to an SVG file.
     */
    private void exportAsSvg() {
        if (isCalculating) {
            return;
        }
        isCalculating = true;
        mStarFuture = new CompletableFuture<>();
        mExecutorService.submit(() -> {
            PixelStar star = getConfiguredStar(
                    java.awt.Toolkit.getDefaultToolkit().getScreenResolution(),
                    getUnitConversion());

            if (star == null) {
                mStarFuture.complete(null);
                return;
            }
            mStarFuture.complete(star);   
        });
        
        mStarFuture.whenComplete((star, u) -> {
            Graphics2D vg2d = new VectorGraphics2D();
            star.draw(vg2d);
            CommandSequence commands = ((VectorGraphics2D) vg2d).getCommands();
            SVGProcessor processor = new SVGProcessor();
            Document doc = processor.getDocument(commands,
                    new PageSize(star.getWidth(), 
                        star.getHeight()));
            try {
                FileOutputStream stream = new FileOutputStream("star.svg");
                doc.writeTo(stream);
                stream.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(
                        RedCarpet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(
                        RedCarpet.class.getName()).log(Level.SEVERE, null, ex);
            }

            mNumPixels.setText(("" + star.getNumberHoles()));
        });
    }
    
    /**
     * Output the star to an EPS file.
     */
    private void exportAsEps() {
        if (isCalculating) {
            return;
        }
        isCalculating = true;
        mStarFuture = new CompletableFuture<>();
        mExecutorService.submit(() -> {
            PixelStar star = getConfiguredStar(
                    java.awt.Toolkit.getDefaultToolkit().getScreenResolution(),
                    getUnitConversion());

            if (star == null) {
                mStarFuture.complete(null);
                return;
            }
            mStarFuture.complete(star);   
        });
        
        mStarFuture.whenComplete((star, u) -> {
            if (star == null) {
                System.out.println("Failed to generate star.");
                return;
            }
            System.out.println("Writing star...");
            Graphics2D vg2d = new VectorGraphics2D();
            star.draw(vg2d);
            CommandSequence commands = ((VectorGraphics2D) vg2d).getCommands();
            EPSProcessor processor = new EPSProcessor();
            Document doc = processor.getDocument(commands,
                    new PageSize(star.getWidth(), 
                        star.getHeight()));
            try {
                FileOutputStream stream = new FileOutputStream("star.eps");
                doc.writeTo(stream);
                stream.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(
                        RedCarpet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(
                        RedCarpet.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            mNumPixels.setText(("" + star.getNumberHoles()));
            System.out.println("Done writing star");
        });
    }
    
    /**
     * Output the star to a PDF file.
     */
    private void exportAsPdf() {
        if (isCalculating) {
            return;
        }
        isCalculating = true;
        mStarFuture = new CompletableFuture<>();
        mExecutorService.submit(() -> {
            PixelStar star = getConfiguredStar(
                    java.awt.Toolkit.getDefaultToolkit().getScreenResolution());

            if (star == null) {
                mStarFuture.complete(null);
                return;
            }
            mStarFuture.complete(star);   
        });
        
        mStarFuture.whenComplete((star, u) -> {
            Graphics2D vg2d = new VectorGraphics2D();
            star.draw(vg2d);
            CommandSequence commands = ((VectorGraphics2D) vg2d).getCommands();
            PDFProcessor pdfProcessor = new PDFProcessor(true);
            Document doc = pdfProcessor.getDocument(commands,
                    new PageSize(star.getWidth(), 
                        star.getHeight()));
            try {
                doc.writeTo(new FileOutputStream("star.pdf"));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(
                        RedCarpet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(
                        RedCarpet.class.getName()).log(Level.SEVERE, null, ex);
            }

            mNumPixels.setText(("" + star.getNumberHoles()));
        });
    }
    
    /**
     * Output the star to a file and also show it in a preview panel.
     */
    private void outputStar() {
        // In the future, there will be a star.
        if (isCalculating) {
            return;
        }
        isCalculating = true;
        mStarFuture = new CompletableFuture<>();
        mExecutorService.submit(() -> {
            PixelStar star = getConfiguredStar(
                    java.awt.Toolkit.getDefaultToolkit().getScreenResolution(),
                    getUnitConversion());

            if (star == null) {
                return;
            }

            mStarFuture.complete(star);   
        });
        
        mStarFuture.whenComplete((star, u) -> {
            BufferedImage bImg = new BufferedImage(star.getWidth(), 
                    star.getHeight(), BufferedImage.TYPE_INT_RGB);

            Graphics2D cg = bImg.createGraphics();
            cg.setBackground(Color.white);
            cg.setColor(Color.white);
            cg.fillRect(0, 0, bImg.getWidth(), bImg.getHeight());
            cg.setColor(Color.black);
            star.draw(cg);
            mNumPixels.setText(("" + star.getNumberHoles()));
            try {
                if (ImageIO.write(bImg, "png", new File("star.png")))
                {
                    System.out.println("-- saved");
                }
            } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
            }
            try {
            if (mPreview == null) {
                mPreview = new StarPreview();
                mPreview.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                mPreview.setLocationRelativeTo(null);   
            }
            } catch (Exception e) {
                e.printStackTrace();
            }
            mPreview.setVisible(true);
            mPreview.setImage(bImg);
            
            Rectangle bounds = mPreview.getScrollPane().getViewport()
                    .getViewRect();
            Dimension size = mPreview.getScrollPane().getViewport()
                    .getViewSize();
            int x = (size.width - bounds.width) / 2;
            int y = (size.height - bounds.height) / 2;
            mPreview.getScrollPane().getViewport().setViewPosition(
                    new Point(x, y));

            isCalculating = false;
        });
    }
    
    /**
     * Get an instance of the star configured.
     * @param pts
     * @return 
     */
    private PixelStar getConfiguredStar(double pts) {
        return getConfiguredStar(pts, 1.0);
    }
    
    /**
     * Get the unit conversion factor for the selected item in the combo.
     * @return 
     */
    private double getUnitConversion() {
        double unitConversion = 0.0;
        switch (jComboUnits.getSelectedIndex()) {
            case 0:
                unitConversion = 1.0;
                break;
            case 1:
                unitConversion = 0.0393700787;
                break;
            case 2:
                unitConversion = 0.3937007874;
                break;
            default:
                break;
        }
        System.out.println("Conversion: " + unitConversion);
        return unitConversion;
    }
    
    /**
     * Configure a {@link PixelStar} with the parameters specified in the UI.
     * @param pts The resolution to use when rendering in pts per inch.
     * @return The {@link PixelStar}.
     */
    private PixelStar getConfiguredStar(double pts, double unitConversion) {
        StarParameters params = getCurrentConfiguration();
        PixelStar pixelStar = new PixelStar(
                params.getStarWidth() * pts * unitConversion, 
                params.getRatio(),
                params.getHoleDiameter() * pts * unitConversion, 
                params.getHoleSpacing() * pts * unitConversion,
                params.getLayers(),
                params.getRowSpacing() * pts * unitConversion * 2.0,
                params.isOuterBorderVisible(),
                params.areInnerBordersVisible(),
                params.isLabellingHoles(),
                PixelStar.getHoleFormatFromInt(params.getHoleType()));
                
        return pixelStar;
    }
    
    /**
     * Load the default star.
     */
    private void loadDefaultStar() {
        List<StarParameters> stars = mStarRepository.getStars();
        if (stars.size() > 0) {
            StarParameters params = stars.get(0);
            setParametersToUi(params);
        }
    }
    
    /**
     * Copy star parameters to the UI.
     * @param params 
     */
    public void setParametersToUi(StarParameters params) {
        jModelName.setText(params.getStarName());
        mStarWidthInches.setText(
                StarRepository.doubleToString(params.getStarWidth()));
        mStarRatio.setText(
                StarRepository.doubleToString(params.getRatio()));
        mHoleDiameterInches.setText(
                StarRepository.doubleToString(params.getHoleDiameter()));
        mHoleSpacingInches.setText(
                StarRepository.doubleToString(params.getHoleSpacing()));
        mRows.setText(Integer.toString(params.getLayers()));
        mIsDrawBorder.setSelected(params.isOuterBorderVisible());
        mIsDrawInnerBorders.setSelected(params.areInnerBordersVisible());
        mIsLabelHoles.setSelected(params.isLabellingHoles());
        mHoleFormat.setSelectedItem(params.getHoleType());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StarConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StarConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StarConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StarConfiguration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StarConfiguration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JComboBox<String> jComboUnits;
    private javax.swing.JMenuItem jExportAsEps;
    private javax.swing.JMenuItem jExportAsSvg;
    private javax.swing.JMenuItem jExportToXLights;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jLoadMenuItem;
    private javax.swing.JTextField jModelName;
    private javax.swing.JMenuItem jNewItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem jSaveItem;
    private javax.swing.JButton mBuildStar;
    private javax.swing.JTextField mHoleDiameterInches;
    private javax.swing.JComboBox<String> mHoleFormat;
    private javax.swing.JTextField mHoleSpacingInches;
    private javax.swing.JCheckBox mIsDrawBorder;
    private javax.swing.JCheckBox mIsDrawInnerBorders;
    private javax.swing.JCheckBox mIsLabelHoles;
    private javax.swing.JLabel mNumPixels;
    private javax.swing.JTextField mRowSpacingInches;
    private javax.swing.JTextField mRows;
    private javax.swing.JTextField mStarRatio;
    private javax.swing.JTextField mStarWidthInches;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

}
