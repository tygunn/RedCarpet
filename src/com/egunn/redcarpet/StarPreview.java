/*
 * Copyright (C) 2018 Tyler Gunn
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.egunn.redcarpet;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;

/**
 * Displays a preview of the generated star.
 * @author tyler
 */
public class StarPreview extends javax.swing.JFrame {
    private ExecutorService mExecutorService = Executors.newCachedThreadPool();
    private BufferedImage mImage;
    private double mCurrentScrollFactor = 1.0f;
    private CompletableFuture<BufferedImage> mScaleFuture = null;
    
    /**
     * Creates new form StarPreview
     */
    public StarPreview() {
        setPreferredSize(new Dimension(600,600));
        initComponents();

    }

    public void setImage(BufferedImage bi) {
        mImage = bi;
        jImageLabel.setIcon(new ImageIcon(bi));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jImageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 600));

        jImageLabel.setToolTipText("");
        jImageLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jImageLabel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jImageLabelMouseWheelMoved(evt);
            }
        });
        jScrollPane1.setViewportView(jImageLabel);
        jImageLabel.getAccessibleContext().setAccessibleName("");

        getContentPane().add(jScrollPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jImageLabelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jImageLabelMouseWheelMoved
        
        if (evt.getPreciseWheelRotation() > 0) {
            mCurrentScrollFactor = Math.min(1.0, mCurrentScrollFactor + 0.15);
        } else {
            mCurrentScrollFactor = Math.max(0.05, mCurrentScrollFactor - 0.15);
        }
        
        updateImage();
    }//GEN-LAST:event_jImageLabelMouseWheelMoved
    
    public javax.swing.JScrollPane getScrollPane() {
        return jScrollPane1;
    }
    
    private void updateImage() {
        if (mScaleFuture != null) {
             return;
        }
        mScaleFuture = new CompletableFuture<BufferedImage>();
        mExecutorService.submit(() -> {
            int width = (int)(mCurrentScrollFactor * mImage.getWidth(null));
            int height = (int)(mCurrentScrollFactor * mImage.getHeight(null));
            Image resized = mImage.getScaledInstance(
                    width, 
                    height, 
                    Image.SCALE_AREA_AVERAGING);
            
             BufferedImage bufferedScaled = new BufferedImage(
                     resized.getWidth(null), 
                     resized.getHeight(null), 
                     BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d = bufferedScaled.createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, 
                    RenderingHints.VALUE_INTERPOLATION_BICUBIC);
            g2d.drawImage(resized, 0, 0, width, height, null);
            g2d.dispose();
            mScaleFuture.complete(bufferedScaled);
        });
        
        mScaleFuture.whenComplete((img, u) -> {
                try {
                    jImageLabel.setIcon(new ImageIcon(img));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                mScaleFuture = null;
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jImageLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

